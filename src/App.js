// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Board = require("./Board.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Button = require("./Button.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("App");

var initialState = /* record */[
  /* status : NotStarted */1,
  /* score */0,
  /* activeMole */undefined,
  /* clickedMole */undefined
];

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* status */0];
              return React.createElement("div", {
                          className: "app"
                        }, React.createElement("div", {
                              className: "game"
                            }, match ? ReasonReact.element(undefined, undefined, Button.make("Start Game!", (function (param) {
                                          return Curry._1(self[/* send */3], /* Start */0);
                                        }), /* array */[])) : React.createElement(React.Fragment, undefined, "score: " + String(self[/* state */1][/* score */1]), React.createElement("button", {
                                        onClick: (function (param) {
                                            return Curry._1(self[/* send */3], /* Reset */1);
                                          })
                                      }, "reset"), React.createElement("button", {
                                        onClick: (function (param) {
                                            return Curry._1(self[/* send */3], /* Stop */2);
                                          })
                                      }, "stop"), ReasonReact.element(undefined, undefined, Board.make(self[/* state */1][/* activeMole */2], (function (index) {
                                              return Curry._1(self[/* send */3], /* Hit */Block.__(1, [index]));
                                            }), /* array */[])))));
            }),
          /* initialState */(function (param) {
              return initialState;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* status : Started */0,
                                  /* score */state[/* score */1],
                                  /* activeMole */undefined,
                                  /* clickedMole */undefined
                                ],
                                (function (self) {
                                    var intervalId = setInterval((function (param) {
                                            var randomInt = Js_math.random_int(0, 9);
                                            return Curry._1(self[/* send */3], /* ChangeActiveMole */Block.__(0, [randomInt]));
                                          }), 1000);
                                    return Curry._1(self[/* onUnmount */4], (function (param) {
                                                  clearInterval(intervalId);
                                                  return /* () */0;
                                                }));
                                  })
                              ]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* status */state[/* status */0],
                                  /* score */0,
                                  /* activeMole */undefined,
                                  /* clickedMole */undefined
                                ]]);
                  case 2 : 
                      return /* Update */Block.__(0, [initialState]);
                  
                }
              } else if (action.tag) {
                var index = action[0];
                var match = state[/* activeMole */2];
                if (match !== undefined) {
                  var match$1 = match === index;
                  if (match$1) {
                    return /* Update */Block.__(0, [/* record */[
                                /* status */state[/* status */0],
                                /* score */state[/* score */1] + 1 | 0,
                                /* activeMole */undefined,
                                /* clickedMole */index
                              ]]);
                  } else {
                    return /* NoUpdate */0;
                  }
                } else {
                  return /* NoUpdate */0;
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* status */state[/* status */0],
                            /* score */state[/* score */1],
                            /* activeMole */action[0],
                            /* clickedMole */undefined
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.initialState = initialState;
exports.make = make;
/* component Not a pure module */
